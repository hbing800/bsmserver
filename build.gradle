//作用于所有模块
allprojects {
    logging.captureStandardOutput LogLevel.INFO
    // Apply the java plugin to add support for Java
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    group = 'com.ghca.easyview.im'
    version = '1.0'
}

//定义版本号
ext {
    if (!project.hasProperty("env")) {
        println '没有配置数据环境，默认使用 开发环境'
        env = "dev"

    }
    println "使用数据库环境为:${project['env']}"

    springVersion = '4.0.7.RELEASE'
    mybatisVersion = '3.2.7'
    mybatisSpringVersion = '1.2.2'
    servletApiVersion = '2.5'
    junitVersion = '4.12'
    mysqlConnectorVersion = '5.1.38'
    fileuploadVersion = '1.3.1'
    jspApiVersion = '2.12'
    jstlApiVserion = '1.2.1'

    hibernateValidatorVersion = '5.2.2.Final'
    dom4jVersion = '1.6.1'
    aspectjVersion = '1.7.4'
    druidVersion = '1.0.15'

    log4jVersion = '1.2.17'
    slf4jLog4jVersion = '1.7.13'
    slf4jVersion = '1.7.21'
    logbackVersion = '1.1.7'
    bcprovVersion = '1.55'

    cglibVersion = '3.1'
    asmVersion = '4.1'
    shiroVersion = '1.2.6'
    jspApiVersion = '2.2.1-b03'

}

// 所有子项目的通用配置
subprojects {

    // JVM 版本号要求
    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    // java编译的时候缺省状态下会因为中文字符而失败
    [compileJava,compileTestJava,javadoc]*.options*.encoding = 'UTF-8'

    //仓库地址 In this section you declare where to find the dependencies of your project
    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    }

    jar {
        manifest {
            attributes("Implementation-Title": "Gradle")
        }
    }

    // 所有需要忽略的包定义在此
    configurations {
        all*.exclude group: 'commons-httpclient'
        all*.exclude group: 'log4j'
        all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }


    // In this section you declare the dependencies for your production and test code
    dependencies {
        // 通用依赖
        compile(
                //Spring 依赖包
                "org.springframework:spring-context:$springVersion",
                "org.springframework:spring-context-support:$springVersion",
                "org.springframework:spring-core:$springVersion",
                "org.springframework:spring-beans:$springVersion",
                "org.springframework:spring-jdbc:$springVersion",
                "org.springframework:spring-aop:$springVersion",
                "org.springframework:spring-tx:$springVersion",
                "org.springframework:spring-orm:$springVersion",
                "org.springframework:spring-expression:$springVersion",
                "org.springframework:spring-web:$springVersion",
                "org.springframework:spring-webmvc:$springVersion",
                "org.springframework:spring-oxm:$springVersion")

        compile(
                "org.mybatis:mybatis:$mybatisVersion",
                "org.mybatis:mybatis-spring:$mybatisSpringVersion",
                "com.alibaba:druid:$druidVersion",
                "mysql:mysql-connector-java:$mysqlConnectorVersion")

        compile(
                "ch.qos.logback:logback-core:$logbackVersion",
                "ch.qos.logback:logback-classic:$logbackVersion",
                "ch.qos.logback:logback-access:$logbackVersion",

                "org.slf4j:slf4j-api:$slf4jVersion",
                "org.slf4j:log4j-over-slf4j:$slf4jVersion",
                "org.slf4j:jul-to-slf4j:$slf4jVersion")

        compile(
                "org.hibernate:hibernate-validator:$hibernateValidatorVersion",
                "org.aspectj:aspectjrt:$aspectjVersion",
                "org.aspectj:aspectjweaver:$aspectjVersion",
                "dom4j:dom4j:$dom4jVersion",
                "cglib:cglib:$cglibVersion",
                "org.ow2.asm:asm:$asmVersion")

        //shiro
        compile(
                "org.apache.shiro:shiro-core:$shiroVersion",
                "org.apache.shiro:shiro-spring:$shiroVersion",
                "org.apache.shiro:shiro-cas:$shiroVersion",
                "org.apache.shiro:shiro-web:$shiroVersion",
                "org.apache.shiro:shiro-ehcache:$shiroVersion")

        compile(
                "javax.servlet.jsp:jsp-api:$jspApiVersion",
                "javax.servlet:servlet-api:$servletApiVersion",
                "org.bouncycastle:bcprov-jdk15on:$bcprovVersion",

                "org.apache.activemq:activemq-all:4.1.2")

        // 依赖maven中不存在的jar
        ext.rootProjectLibs = new File(rootProject.rootDir, 'libs').getAbsolutePath()
        ext.jarTree = fileTree(dir: 'libs', include: '**/*.jar')
        ext.jarTree += fileTree(dir: 'lib', include: '**/*.jar')
        ext.jarTree += fileTree(dir: rootProjectLibs, include: '**/*.jar')

        compile jarTree

        // 测试依赖
        testCompile(
                "org.springframework:spring-test:$springVersion",
                "junit:junit:$junitVersion"
        )
    }

    def getDbProperties = {
        def properties = new Properties()
        def dbPropertiesPath = sourceSets.main.resources.srcDirs[1].path;
        file("$dbPropertiesPath/db.properties").withInputStream { inputStream ->
            properties.load(inputStream)
        }
        properties;
    }

    sourceSets {
        main {
            resources {
                srcDir("src/main/resources")
                if (project['env'] == 'dev') {
                    srcDir("src/main/resources-dev")
                } else if (project['env'] == 'prod') {
                    srcDir('src/main/resources-prod')
                } else if (project['env'] == 'test') {
                    srcDir('src/main/resources-test')
                }
            }
        }
    }

    // 显示当前项目下所有用于 compile 的 jar.
    task listJars (description: 'Display all compile jars.') << {
        configurations.compile.each { File file -> println file.name }
    }

}